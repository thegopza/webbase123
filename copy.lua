--[[ =======================
       Build A Zoo ‚Äî Auto Gift (TP + batch sending + progress UI)
     ======================= ]]

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local LocalPlayer = Players.LocalPlayer

-- Remote
local GiftRE = ReplicatedStorage:WaitForChild("Remote"):WaitForChild("GiftRE")

-- ========= Helpers =========
local function getHRP(plr)
    plr = plr or LocalPlayer
    local ch = plr and plr.Character
    return ch and ch:FindFirstChild("HumanoidRootPart")
end

-- ‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÑ‡∏õ‡∏¢‡∏∑‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (off = ‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤)
local function teleportToTarget(targetPlr, off)
    off = off or 2
    local myHRP = getHRP(LocalPlayer)
    local tgHRP = getHRP(targetPlr)
    if not (myHRP and tgHRP) then return false, "no HRP" end
    local dir = (myHRP.Position - tgHRP.Position)
    if dir.Magnitude < 0.1 then dir = Vector3.new(1,0,0) end
    local dest = tgHRP.Position + dir.Unit * off
    local look = (tgHRP.Position - dest).Unit
    local safeY = dest.Y + 1.5
    pcall(function()
        myHRP.CFrame = CFrame.new(Vector3.new(dest.X, safeY, dest.Z), dest + look)
    end)
    task.wait(0.1)
    return true
end

-- ‡∏ö‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ mutation ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (Jurassic ‚áí Dino)
local function normalizeMut(m)
    if not m then return nil end
    m = tostring(m)
    if m == "Jurassic" then return "Dino" end
    return m
end

-- ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡πÑ‡∏Ç‡πà‡∏à‡∏≤‡∏Å PlayerGui.Data.Egg + ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Type/Mutation
local function _getEggFolder()
    local pg = LocalPlayer:FindFirstChild("PlayerGui")
    local data = pg and pg:FindFirstChild("Data")
    return data and data:FindFirstChild("Egg") or nil
end

local function listEggsFiltered(typeSet, mutSet, limit)
    local eg = _getEggFolder()
    local list = {}
    if not eg then return list end
    for _, ch in ipairs(eg:GetChildren()) do
        if #ch:GetChildren() == 0 then
            local T = tostring(ch:GetAttribute("T") or ch:GetAttribute("Type") or ch.Name)
            local M = normalizeMut(ch:GetAttribute("M") or ch:GetAttribute("Mutate"))
            local passType = (not typeSet) or (next(typeSet)==nil) or typeSet[T]
            local passMut  = (not mutSet)  or (next(mutSet)==nil)  or mutSet[tostring(M or "")]
            if passType and passMut then
                table.insert(list, { uid = ch.Name, T = T, M = M })
                if limit and #list >= limit then break end
            end
        end
    end
    return list
end

-- ‡πÉ‡∏™‡πà‡πÑ‡∏Ç‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠ (‡∏™‡∏•‡∏≠‡∏ï 2) ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏°‡∏ñ‡∏∑‡∏≠‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏¥‡∏á Gift
local function holdEgg(uid)
    local pg = LocalPlayer:FindFirstChild("PlayerGui")
    local data = pg and pg:FindFirstChild("Data")
    local deploy = data and data:FindFirstChild("Deploy")
    if deploy then deploy:SetAttribute("S2", "Egg_"..uid) end
    task.wait(0.05)
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Two, false, game)
    task.wait(0.04)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Two, false, game)
end

-- ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á 1 ‡∏ä‡∏¥‡πâ‡∏ô (TP ‚Üí hold ‚Üí FireServer)
local function giftOnce(targetPlayer, egg)
    if not egg then return false, "no egg" end
    local okTP = teleportToTarget(targetPlayer, 1.5)
    if not okTP then return false, "tp fail" end

    holdEgg(egg.uid)
    task.wait(0.12)
    local ok = pcall(function()
        GiftRE:FireServer(targetPlayer)
    end)
    task.wait(0.22)
    return ok == true
end

-- ========= WindUI =========
local WindUI = rawget(getfenv(0), "WindUI")
if not WindUI then
    local ok, lib = pcall(function()
        return loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
    end)
    if ok and lib then WindUI = lib end
end

local Window = WindUI:CreateWindow({
    Title = "Build A Zoo",
    Icon = "gift",
    IconThemed = true,
    Author = "MheeNahee",
    Folder = "MheeNahee",
    Size = UDim2.fromOffset(520, 360),
    Transparent = true,
    Theme = "Dark",
})
local Section = Window:Section({ Title = "üéÅ Gift Tools", Opened = true })
local GiftTab = Section:Tab({ Title = "üéÅ | Gift" })

-- ========= UI State =========
local function makeSet(tbl) local s={} for _,v in ipairs(tbl or {}) do s[tostring(v)]=true end return s end
local selectedTargetName
local selectedTypes = {}
local selectedMuts  = {}
local desiredCountInput = ""   -- ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á = ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
local autoGift = false
local autoThread

-- progress
local totalSent, totalTarget = 0, 0
local lastLine = "-"
local function fmtItemLine(egg, idx, total)
    local mut = egg.M and (" ‚Ä¢ "..egg.M) or ""
    return string.format("%s%s %d/%d", egg.T, mut, idx, total)
end

-- UI parts
local playersDropdown = GiftTab:Dropdown({
    Title = "üéØ Target Player",
    Values = {},
    Multi  = false,
    Callback = function(v) selectedTargetName = v end
})
local function refreshPlayers()
    local list = {}
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then table.insert(list, p.Name) end
    end
    table.sort(list)
    if playersDropdown.SetList then playersDropdown:SetList(list) end
end
GiftTab:Button({ Title="üîÑ Refresh Players", Callback=refreshPlayers })
refreshPlayers()

GiftTab:Dropdown({
    Title = "ü•ö Types (multi)",
    Desc  = "‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ = ‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó",
    Values = {"BasicEgg","RareEgg","SuperRareEgg","EpicEgg","LegendEgg","PrismaticEgg","HyperEgg","VoidEgg","BowserEgg","DemonEgg","BoneDragonEgg","UltraEgg","DinoEgg","FlyEgg","UnicornEgg","AncientEgg"},
    Multi  = true, AllowNone = true,
    Callback = function(arr) selectedTypes = makeSet(arr) end
})

-- ‡πÄ‡∏û‡∏¥‡πà‡∏° Snow + Dino (‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö Jurassic ‡πÄ‡∏õ‡πá‡∏ô Dino)
GiftTab:Dropdown({
    Title = "üß¨ Mutations (multi)",
    Desc  = "‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ = ‡∏ó‡∏∏‡∏Å‡∏ä‡∏ô‡∏¥‡∏î",
    Values = {"Golden","Diamond","Electric","Fire","Snow","Dino"},
    Multi  = true, AllowNone = true,
    Callback = function(arr)
        selectedMuts = makeSet(arr)
        if selectedMuts["Dino"] then selectedMuts["Jurassic"] = true end
    end
})

GiftTab:Input({
    Title = "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞ Gift (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á = ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)",
    Value = "",
    Callback = function(v)
        desiredCountInput = tostring(v or ""):match("^%s*(.-)%s*$")
    end
})

local progressPara = GiftTab:Paragraph({
    Title = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
    Desc  = "‡∏£‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á...",
    Image = "activity", ImageSize = 20
})
local function setProgress(desc)
    if progressPara and progressPara.SetDesc then progressPara:SetDesc(desc) end
end

local function sendBatch(targetPlayer, amountOrNil)
    totalSent, totalTarget = 0, 0
    lastLine = "-"

    -- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏Ç‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà ‚Äú‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‚Äù
    local all = listEggsFiltered(selectedTypes, selectedMuts, nil)
    if #all == 0 then
        setProgress("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏Ç‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")
        return
    end

    -- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    if amountOrNil and amountOrNil > 0 then
        totalTarget = math.min(amountOrNil, #all)
    else
        totalTarget = #all -- ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    end

    setProgress(("‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á %d ‡∏ä‡∏¥‡πâ‡∏ô"):format(totalTarget))

    -- ‡∏™‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞ 1 ‡∏ä‡∏¥‡πâ‡∏ô‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö / ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏î
    local idx = 1
    while idx <= totalTarget do
        -- ‡∏î‡∏∂‡∏á egg ‡∏™‡∏î ‡πÜ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏µ‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏•‡∏î‡πÑ‡∏õ
        local eggsNow = listEggsFiltered(selectedTypes, selectedMuts, 1)
        if #eggsNow == 0 then break end
        local egg = eggsNow[1]

        local ok = giftOnce(targetPlayer, egg)
        if ok then
            totalSent += 1
            lastLine = fmtItemLine(egg, totalSent, totalTarget)
            setProgress("‚úÖ " .. lastLine)
        else
            setProgress("‚ö†Ô∏è ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...")
            task.wait(0.35)
            -- ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà index ‡πÄ‡∏î‡∏¥‡∏°
        end

        idx += 1
        task.wait(0.15)
    end

    if totalSent >= totalTarget then
        setProgress(("üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß %d/%d\n‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: %s"):format(totalSent,totalTarget,lastLine))
    else
        setProgress(("‚õî ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ %d/%d\n‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: %s"):format(totalSent,totalTarget,lastLine))
    end
end

GiftTab:Button({
    Title = "üéÅ Gift ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ (‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á)",
    Callback = function()
        local target = selectedTargetName and Players:FindFirstChild(selectedTargetName)
        if not target then
            setProgress("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"); return
        end
        -- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á ‚áí ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        local num = tonumber(desiredCountInput or "")
        if num then num = math.max(1, math.floor(num)) end
        sendBatch(target, num)
    end
})

GiftTab:Toggle({
    Title = "ü§ñ Auto Gift (‡∏ß‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ)",
    Desc  = "‡∏à‡∏∞‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á",
    Value = false,
    Callback = function(state)
        autoGift = state
        if state and not autoThread then
            autoThread = task.spawn(function()
                while autoGift do
                    local target = selectedTargetName and Players:FindFirstChild(selectedTargetName)
                    if not target then setProgress("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"); task.wait(0.6) goto CONT end

                    local num = tonumber(desiredCountInput or "")
                    if num then num = math.max(1, math.floor(num)) end
                    sendBatch(target, num)

                    task.wait(0.8)
                    ::CONT::
                end
                autoThread = nil
            end)
            setProgress("‡πÄ‡∏£‡∏¥‡πà‡∏° Auto Gift ‚Ä¶")
        end
    end
})
